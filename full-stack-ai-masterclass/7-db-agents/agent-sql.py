import os
from dotenv import load_dotenv
from colorama import Fore
from pydantic_ai import Agent, RunContext
from pydantic_ai.models.openai import OpenAIModel
from psycopg2 import connect, DatabaseError

# Initialize model
load_dotenv()
model = OpenAIModel('gpt-4o-mini', api_key=os.getenv('OPENAI_API_KEY'))

# Connect to the PostgreSQL server
print('Connecting to the PostgreSQL database...')
conn = connect(
            host = '127.0.0.1',
            dbname = 'postgres',
            user = 'postgres',
            password = 'postgres',
            port = 54322
        )

system_prompt = """
    You are an expert SQL developer, skilled at writing queries for CREATE, SELECT, UPDATE and DELETE records from a Supabase database, which is based on PostgreSQL. Use the customers table schema below to generate valid SQL and use the tool to execute the query and return structured data to the customer. Use the SQL validation tool to check the query for correctness. If it's valid, use the SQL execution tool to run the query.

    For all SELECT queries, return the results to the user. For all other queries, return the record affected.

    Always return data in a tabular format for the terminal. Do not return HTML.

    -- customers table schema
    create table public.customers (
    id bigint generated by default as identity not null,
    created_at timestamp with time zone not null default now(),
    email text null,
    full_name text null,
    bio text null,
    constraint customers_pkey primary key (id),
    constraint customers_email_key unique (email)
    ) TABLESPACE pg_default;
"""

agent = Agent(model=model, system_prompt=system_prompt)

# SQL validation tool
@agent.tool(retries=3)
async def validate_sql(ctx: RunContext[any], sql: str) -> bool:
    """Validates an SQL query for PostgreSQL syntax."""
    
    try:
        print(Fore.GREEN, f'Validating SQL query {sql}...')
        agent = Agent(model=model, system_prompt=f"You are a SQL developer. Validate the query {sql} for correctness agains PostgreSQL syntax. Return True if the query is valid, False otherwise.")
        result = await agent.run(sql)
        return result.data
        
    except(Exception, DatabaseError) as error:
        print(error)

# SQL execution tool
@agent.tool(retries=3)
async def run_query(ctx: RunContext[any], sql: str):
    """Run an SQL query on the Supabase database provided."""
    
    try:
        # Creating a cursor with name cur.
        cur = ctx.deps.cursor()
        # Execute a query:
        print(Fore.GREEN, f'Executing SQL query {sql}...')
        cur.execute(sql)
        result = cur.fetchall()
        print(Fore.CYAN, f"Result: {result}")
        return result
        
    except(Exception, DatabaseError) as error:
        print(error)
    finally:
        if conn is not None:
            conn.commit()


# Define the main loop
def main_loop():
    while True:
        user_input = input(">> Enter a query (q, quit, exit to exit): ")
        if user_input.lower() in ["quit", "exit", "q"]:
            if conn is not None:
                conn.close()
                print(Fore.RESET, 'Database connection closed.')
            print("Goodbye!")
            break
        
        try:
            result = agent.run_sync(user_input, deps=conn)
            print(Fore.YELLOW, result.data)
        except ValueError:
            print(Fore.RED, "No customer found with that email.")
        except Exception as e:
            print(Fore.RED, "An error occurred: ", e)

if __name__ == "__main__":
    main_loop()